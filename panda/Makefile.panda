# determine list of plugins
# remove spaces from lines. skip lines starting with a #. concatenate the rest into a space-delimited list
PANDA_PLUGINS=$(shell tr -d "[:blank:]" < $(SRC_PATH)/panda/plugins/config.panda | grep -v "^\#" | xargs)

# ditto for extra plugins
ifdef EXTRA_PLUGINS_PATH
	EXTRA_PANDA_PLUGINS=$(shell tr -d "[:blank:]" < $(EXTRA_PLUGINS_PATH)/panda/plugins/config.panda | grep -v "^\#" | xargs)
	EXTRA_PLUGIN_SUBDIR_RULES=$(patsubst %,extra-plugin-%, $(EXTRA_PANDA_PLUGINS))
endif

ifdef CONFIG_SOFTMMU
RR_PRINT_PROG=rr_print_$(TARGET_NAME)$(EXESUF)
endif

PLUGIN_SUBDIR_RULES=$(patsubst %,plugin-%, $(PANDA_PLUGINS))
PLUGIN_SUBDIR_MAKEFLAGS=$(if $(V),,--no-print-directory) BUILD_DIR=$(BUILD_DIR)

PANDA_API_INT=$(wildcard $(SRC_PATH)/panda/plugins/*/*_int.h)
PANDA_API_INT_REL=$(subst $(SRC_PATH)/,,$(PANDA_API_INT))
PANDA_API_EXT=$(patsubst %_int.h,%_ext.h,$(PANDA_API_INT_REL))

plugin-%: plog.pb-c.h $(PANDA_API_EXT)
	$(call quiet-command,mkdir -p panda/plugins/$*,)
	$(call quiet-command,$(MAKE) $(PLUGIN_SUBDIR_MAKEFLAGS) \
		-f "$(SRC_PATH)/panda/plugins/panda.mak" \
		-f "$(SRC_PATH)/panda/plugins/$*/Makefile" \
		PLUGIN_SRC_ROOT="$(SRC_PATH)/panda/plugins" \
		V="$(V)" PLUGIN_NAME="$*" all,)

extra-plugin-%: plog.pb-c.h $(PANDA_API_EXT)
	$(call quiet-command,mkdir -p panda/plugins/$*,)
	$(call quiet-command,$(MAKE) $(PLUGIN_SUBDIR_MAKEFLAGS) \
		-f "$(SRC_PATH)/panda/plugins/panda.mak" \
		-f "$(EXTRA_PLUGINS_PATH)/panda/plugins/$*/Makefile" \
		PLUGIN_SRC_ROOT="$(EXTRA_PLUGINS_PATH)/panda/plugins" \
		V="$(V)" PLUGIN_NAME="$*" all,)

all: $(PLUGIN_SUBDIR_RULES) $(EXTRA_PLUGIN_SUBDIR_RULES)

PROTO_FILES := $(shell find $(SRC_PATH)/panda/plugins -name *.proto)

plog.proto: $(PROTO_FILES)
	$(call quiet-command,\
		$(SRC_PATH)/panda/scripts/pp.py $@ $(SRC_PATH)/panda/plugins/config.panda,\
		"  PROTO $@")

%.pb-c.h %.pb-c.c: %.proto
	$(call quiet-command,\
		protoc-c --proto_path=. --c_out=. $<,\
		"  PROTO plog.pb-c.h plog.pb-c.c")

plog_pb2.py: plog.proto
	$(call quiet-command,\
		protoc --proto_path=. --python_out=. $<,\
		"  PROTO plog_pb2.py")

GENERATED_HEADERS += plog.pb-c.h
GENERATED_HEADERS += $(PANDA_API_EXT)

# This keeps make from thinking it's an "intermediate" file
.PRECIOUS: $(PANDA_API_EXT)

%_ext.h: %_int.h
	$(call quiet-command,mkdir -p $(dir $@),)
	$(call quiet-command,\
		$(SRC_PATH)/panda/scripts/apigen.py $< $@ $(QEMU_INCLUDES),\
		"  API   $(TARGET_DIR)$(subst $(BUILD_DIR)/,,$@)")

obj-y += panda/src/callbacks.o
obj-y += panda/src/callback_support.o
obj-y += panda/src/common.o
obj-y += panda/src/plog.o
obj-y += plog.pb-c.o
obj-y += panda/src/rr/rr_log.o
#obj-y += panda/src/plog_print.o
#obj-y += panda/src/plog_reader.o
#obj-y += panda/src/guestarch.o

panda/src/rr/rr_print.o: \
	$(SRC_PATH)/panda/include/panda/rr/rr_log.h \
	$(SRC_PATH)/panda/include/panda/rr/rr_log_all.h

$(RR_PRINT_PROG): panda/src/rr/rr_print.o
	$(call LINK,$^)

PROGS+=$(RR_PRINT_PROG) plog_pb2.py

clean: clean-panda

clean-panda:
	@if [ -d "panda/plugins" ]; then\
		find panda/plugins -depth -mindepth 1 -delete;\
		rm -f panda/panda_*.so;\
	fi

ifdef CONFIG_LLVM
#########################################################
# LLVM library

obj-y += panda/llvm/tcg-llvm.o
obj-y += panda/llvm/helper_runtime.o
panda/llvm/tcg-llvm.o-cflags := $(LLVM_CXXFLAGS) -Wno-cast-qual
panda/llvm/helper_runtime.o-cflags := $(LLVM_CXXFLAGS) -Wno-cast-qual

# regular bitcode
llvm-y =

# morphed bitcode - morph call instructions and function names after bitcode is
# linked together to make helper bitcode available for use by PANDA plugins
llvmmorph-y =

X86_HELPERS = helper.bc2 bpt_helper.bc2 excp_helper.bc2 fpu_helper.bc2
X86_HELPERS += excp_helper.bc2 fpu_helper.bc2 cc_helper.bc2 int_helper.bc2
X86_HELPERS += svm_helper.bc2 smm_helper.bc2 misc_helper.bc2 mem_helper.bc2 seg_helper.bc2
X86_HELPERS += mpx_helper.bc2

llvm-$(TARGET_I386) += fpu/softfloat.bc2
llvm-$(TARGET_I386) += $(addprefix target-i386/,$(X86_HELPERS))
llvmmorph-$(TARGET_I386) += llvm-helpers.bc

llvm-$(TARGET_X86_64) += fpu/softfloat.bc2
llvm-$(TARGET_X86_64) += $(addprefix target-i386/,$(X86_HELPERS))
llvmmorph-$(TARGET_X86_64) += llvm-helpers.bc

ARM_HELPERS = op_helper.bc2 helper.bc2 neon_helper.bc2 iwmmxt_helper.bc2
ARM_HELPERS += crypto_helper.bc2

llvm-$(TARGET_ARM) += fpu/softfloat.bc2
llvm-$(TARGET_ARM) += $(addprefix target-arm/,$(ARM_HELPERS))
llvmmorph-$(TARGET_ARM) += llvm-helpers.bc

CLANG_FILTER = -Wold-style-declaration -fstack-protector-strong -Wno-error=cpp -g -O0 -O1 -O3
QEMU_BC2FLAGS:=$(filter-out $(CLANG_FILTER),$(QEMU_CFLAGS) $(CFLAGS)) -O2
%.bc2: %.c $(GENERATED_HEADERS)
	$(call quiet-command,\
		$(LLVMCC) $(QEMU_INCLUDES) $(QEMU_BC2FLAGS) $(QEMU_DGFLAGS) -c -emit-llvm -o $@ $<,\
		"  CLANG $(TARGET_DIR)$@")

llvm-helpers.bc1: $(llvm-y)
	$(call quiet-command,$(LLVM_LINK) -o $@ $^,"  LLVM  $(TARGET_DIR)$@")

# Make explicit the fact that we need the tool present to do the morphing

panda/tools/helper_call_modifier.o-cflags += $(LLVM_CXXFLAGS)

panda/tools:
	$(call quiet-command,mkdir -p panda/tools,)

panda/tools/helper_call_modifier.o: | panda/tools
panda/tools/helper_call_modifier: panda/tools/helper_call_modifier.o

llvm-helpers.bc: llvm-helpers.bc1 panda/tools/helper_call_modifier
	$(call quiet-command,\
		panda/tools/helper_call_modifier -i $< -o $@,\
		"  LLMOD $(TARGET_DIR)$@")

# add this to the all target
all: $(llvmmorph-y)

clean: clean-llvm

clean-llvm:
	rm -f $(llvm-y) $(llvmmorph-y)

endif # CONFIG_LLVM
